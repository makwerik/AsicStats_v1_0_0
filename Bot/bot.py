import asyncio
import os
from typing import Dict
from aiogram import Bot, Router, Dispatcher, F
from dotenv import load_dotenv
from aiogram.filters import CommandStart
from aiogram.types import Message
from Bot.middlewares.auth import AuthMiddleware
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from S19.asyncantiminer import S19Async
import logging

logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")

logger = logging.getLogger(__name__)

load_dotenv()

token = os.getenv("bot_token")

router = Router()

s19 = S19Async()


@router.message(CommandStart())
async def start(message: Message, is_allowed: bool) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫) –∫–æ–º–∞–Ω–¥—ã /start
        –ø–∞—Ä–∞–º–µ—Ç—Ä - is_allowed: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∫–∏–Ω—É—Ç –º–æ–∏–º –º–∏–¥–ª–≤–∞—Ä–æ–π AuthMiddleware
    """
    if is_allowed:
        keyboard_list = [
            [KeyboardButton(text="Hash Rate")], [KeyboardButton(text="Fans ñ£ò")],
            [KeyboardButton(text="Temperature c¬∞")], [KeyboardButton(text="–í–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")],
            [KeyboardButton(text="–û—Ç–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")]
        ]
        keyboard = ReplyKeyboardMarkup(keyboard=keyboard_list, resize_keyboard=True)
        await message.answer("üîêüö™", reply_markup=keyboard)
    else:
        await message.answer("üîíüö™")


@router.message(F.text == "Hash Rate")
async def hash_rate(message: Message, is_allowed: bool):
    """
    –•–µ–Ω–¥–ª–µ—Ä (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫) —Å–æ–æ–±—â–µ–Ω–∏—è Hash Rate
        –ø–∞—Ä–∞–º–µ—Ç—Ä - is_allowed: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∫–∏–Ω—É—Ç –º–æ–∏–º –º–∏–¥–ª–≤–∞—Ä–æ–π AuthMiddleware
    """
    if is_allowed:
        hash_rate_stats = await s19.get_stats_hash_rate()

        if s19.ERROR_MESSAGE:
            await message.answer(text=s19.ERROR_MESSAGE)
            return

        if s19.NETWORK:
            msg = (
                "*‚ö° –•–µ—à—Ä–µ–π—Ç*\n\n"
                f"üìä –°—Ä–µ–¥–Ω–∏–π: `{hash_rate_stats.hash_rate_avg}` TH/s\n"
                f"‚è±Ô∏è –ó–∞ 5 —Å–µ–∫—É–Ω–¥: `{hash_rate_stats.hash_rate_5_second}` TH/s\n"
                f"üïí –ó–∞ 30 –º–∏–Ω—É—Ç: `{hash_rate_stats.hash_rate_30_minutes}` TH/s"
            )
            await message.answer(msg, parse_mode="MarkdownV2")
        else:
            msg = (
                "‚ùå *–ù–µ—Ç —Å–µ—Ç–∏*\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ ASIC"
            )
            await message.answer(msg, parse_mode="MarkdownV2")
    return


@router.message(F.text == "Fans ñ£ò")
async def fan_stats(message: Message, is_allowed: bool):
    """
    –•–µ–Ω–¥–ª–µ—Ä (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫) —Å–æ–æ–±—â–µ–Ω–∏—è Fans ñ£ò
        –ø–∞—Ä–∞–º–µ—Ç—Ä - is_allowed: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∫–∏–Ω—É—Ç –º–æ–∏–º –º–∏–¥–ª–≤–∞—Ä–æ–π AuthMiddleware
    """
    if is_allowed:
        fans_stats = await s19.get_stats_fan()

        if s19.ERROR_MESSAGE:
            await message.answer(text=s19.ERROR_MESSAGE)
            return

        if s19.NETWORK:
            if s19.FANS:
                msg = (
                    "*üåÄ –í–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä—ã*\n\n"
                    f"1Ô∏è‚É£ üå¨Ô∏è‚¨ÖÔ∏è –í–¥—É–≤ –≤–æ–∑–¥—É—Ö–∞: `{fans_stats.first_fan}` RPM\n"
                    f"2Ô∏è‚É£ üå¨Ô∏è‚¨ÖÔ∏è –í–¥—É–≤ –≤–æ–∑–¥—É—Ö–∞: `{fans_stats.second_fan}` RPM\n"
                    f"3Ô∏è‚É£ ‚û°Ô∏èüå¨Ô∏è –í—ã–¥—É–≤ –≤–æ–∑–¥—É—Ö–∞: `{fans_stats.third_fan}` RPM\n"
                    f"4Ô∏è‚É£ ‚û°Ô∏èüå¨Ô∏è –í—ã–¥—É–≤ –≤–æ–∑–¥—É—Ö–∞: `{fans_stats.fourth_fan}` RPM"
                )
                await message.answer(msg, parse_mode="MarkdownV2")
            else:
                msg = (
                    "‚ùå *–í–ò–ù–¢–ê–ú –ü–ò–ó–î–ê*\n\n"
                    "–°–†–û–ß–ù–û –û–¢–ö–õ–Æ–ß–ê–ô –ê–°–ò–ö"
                )
                await message.answer(msg, parse_mode="MarkdownV2")
        else:
            msg = (
                "‚ùå *–ù–µ—Ç —Å–µ—Ç–∏*\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ ASIC"
            )
            await message.answer(msg, parse_mode="MarkdownV2")
    return


@router.message(F.text == "Temperature c¬∞")
async def temperature_stats(message: Message, is_allowed: bool):
    """
    –•–µ–Ω–¥–ª–µ—Ä (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫) —Å–æ–æ–±—â–µ–Ω–∏—è Temperature c¬∞
        –ø–∞—Ä–∞–º–µ—Ç—Ä - is_allowed: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∫–∏–Ω—É—Ç –º–æ–∏–º –º–∏–¥–ª–≤–∞—Ä–æ–π AuthMiddleware
    """
    if is_allowed:
        temp_stats = await s19.get_stats_board()

        if s19.ERROR_MESSAGE:
            await message.answer(text=s19.ERROR_MESSAGE)
            return

        if s19.NETWORK:
            one_board = temp_stats[0]
            second_board = temp_stats[1]
            third_board = temp_stats[2]

            msg = (
                "üìü <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–∞—Ç</b>\n\n"
                f"üß© <b>–ü–ª–∞—Ç–∞ {one_board.board_number + 1}</b>\n"
                f"üå¨ –í—Ö–æ–¥—è—â–∏–π –≤–æ–∑–¥—É—Ö: <code>{one_board.incoming_air}¬∞C</code>\n"
                f"üìã –ü–ª–∞—Ç–∞: <code>{one_board.temperature_of_the_board}¬∞C</code>\n"
                f"üí† –ß–∏–ø—ã: <code>{one_board.chip_temperature}¬∞C</code>\n\n"
                f"üß© <b>–ü–ª–∞—Ç–∞ {second_board.board_number + 1}</b>\n"
                f"üå¨ –í—Ö–æ–¥—è—â–∏–π –≤–æ–∑–¥—É—Ö: <code>{second_board.incoming_air}¬∞C</code>\n"
                f"üìã –ü–ª–∞—Ç–∞: <code>{second_board.temperature_of_the_board}¬∞C</code>\n"
                f"üí† –ß–∏–ø—ã: <code>{second_board.chip_temperature}¬∞C</code>\n\n"
                f"üß© <b>–ü–ª–∞—Ç–∞ {third_board.board_number + 1}</b>\n"
                f"üå¨ –í—Ö–æ–¥—è—â–∏–π –≤–æ–∑–¥—É—Ö: <code>{third_board.incoming_air}¬∞C</code>\n"
                f"üìã –ü–ª–∞—Ç–∞: <code>{third_board.temperature_of_the_board}¬∞C</code>\n"
                f"üí† –ß–∏–ø—ã: <code>{third_board.chip_temperature}¬∞C</code>"
            )

            await message.answer(msg, parse_mode="HTML")
        else:
            msg = (
                "‚ùå *–ù–µ—Ç —Å–µ—Ç–∏*\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ ASIC"
            )
            await message.answer(msg, parse_mode="MarkdownV2")
    return



fan_tasks: Dict[int, asyncio.Task] = {}


async def check_fan(bot: Bot, chat_id: int, is_allowed: bool, interval: int = 10):
    """
    –ú–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–æ–≤.
    """
    if is_allowed:
        while True:
            fans_stat = await s19.get_stats_fan()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥
            if not s19.NETWORK:
                msg = (
                    "‚ùå *–í–ò–ù–¢–ê–ú –ü–ò–ó–î–ê*\n\n"
                    "–°–†–û–ß–ù–û –û–¢–ö–õ–Æ–ß–ê–ô –ê–°–ò–ö"
                )
                await bot.send_message(chat_id=chat_id, text=msg, parse_mode="MarkdownV2")

            logger.info(msg=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ: {fan_tasks} || –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–Ω—Ç–∞—Ö: {fans_stat}")
            await asyncio.sleep(interval)

    return



@router.message(F.text == "–í–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
async def fan_start(message: Message, bot: Bot, is_allowed: bool):
    if is_allowed:
        chat_id = message.chat.id
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É
        task = fan_tasks.get(chat_id)

        if task and not task.done():
            # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –µ—Å—Ç—å, —Ç–æ –Ω–µ –ø–ª–æ–¥–∏–º –∏—Ö
            await message.answer("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return

        fan_tasks[chat_id] = asyncio.create_task(check_fan(bot=bot, chat_id=chat_id, is_allowed=is_allowed))
        await message.answer("–ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–æ–≤ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥")

    return


@router.message(F.text == "–û—Ç–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
async def fun_disabled(message: Message, is_allowed: bool):
    """–ú–µ—Ç–æ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    if is_allowed:
        chat_id = message.chat.id
        task = fan_tasks.pop(chat_id, None)

        if not task:
            await message.answer("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return

        if not task.done():
            task.cancel()
            try:
                await task
            except asyncio.CancelledError:
                pass

        logger.info(msg=f"–ó–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã: {fan_tasks}")
        await message.answer("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    return



async def main() -> None:
    bot = Bot(token=token)
    # –î–∏—Å–ø–µ—Ç—á–µ—Ä
    dp = Dispatcher()
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é –º–∏–¥–ª–≤–∞—Ä—É –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–∞–∂–¥–æ–µ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–π–¥–µ—Ç —Å–Ω–∞—á–∞–ª–∞ —á–µ—Ä–µ–∑ AuthMiddleware
    # –í data –ø–æ—è–≤–∏—Ç—Å—è is_allowed –∏ –ø–æ–ø–∞–¥—ë—Ç –≤ —Ö—ç–Ω–¥–ª–µ—Ä—ã (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏)
    dp.message.middleware(AuthMiddleware())
    dp.callback_query.middleware(AuthMiddleware())

    # –ü–æ–¥–∫–ª—é—á–∞—é —Ä–æ—É—Ç–µ—Ä —Å —Ö—ç–Ω–¥–µ—Ä–∞–º–∏ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏)
    dp.include_router(router)
    await dp.start_polling(bot)
